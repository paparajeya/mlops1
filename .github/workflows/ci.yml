name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  MLFLOW_TRACKING_URI: http://localhost:5000

jobs:
  # Lint and test
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort mypy

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check src/

    - name: Import sorting check with isort
      run: |
        isort --check-only src/

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run tests with pytest
      run: |
        pytest src/tests/ --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

  # Build and test Docker image
  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t mlops-mnist:latest .

    - name: Test Docker image
      run: |
        docker run --rm mlops-mnist:latest python -c "import torch; print('PyTorch version:', torch.__version__)"
        docker run --rm mlops-mnist:latest python -c "import fastapi; print('FastAPI version:', fastapi.__version__)"

  # Train model (only on main branch)
  train:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start MLflow server
      run: |
        mlflow server --host 0.0.0.0 --port 5000 &
        sleep 10

    - name: Download data
      run: |
        python scripts/download_data.py

    - name: Train model
      run: |
        python scripts/train.py --epochs 2 --batch-size 32

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts
        path: models/

  # Deploy to staging (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: train
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - uses: actions/checkout@v3

    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: model-artifacts
        path: models/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # Performance test
  performance:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance tests
      run: |
        python scripts/test_api.py --performance

  # Deploy to production (only on release)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker, performance]
    if: startsWith(github.ref, 'refs/tags/')
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: model-artifacts
        path: models/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.production.yml up -d

    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"
        # Add notification logic here (Slack, email, etc.) 